var tipuesearch = {"pages":[{"title":" Fortran Program ","text":"Fortran Program Hi, my name is . This is a project which I wrote. This file will provide the documents. I'm\nwriting the body of the text here. It contains an overall description of the\nproject. It might explain how to go about installing/compiling it. It might\nprovide a change-log for the code. [[linalg]] Maybe it will talk about the\nhistory and/or motivation for this software. Note You can include any notes (or bugs, warnings, or todos) like so. Bug You can have multi-paragraph versions of these too! That means you can\ninclude ordered lists unordered lists images etc. Isn't that cool? Bug Hey I'm doing it again... This ones ends mid... ...paragraph. You can have as many paragraphs as you like here and can use headlines, links,\nimages, etc. Basically, you can use anything in Markdown and Markdown-Extra.\nFurthermore, you can insert LaTeX into your documentation. So, for example,\nyou can provide inline math using like  y = x&#94;2  or math on its own line\nlike  x = \\sqrt{y}  or  e = mc&#94;2.  You can even use LaTeX environments!\nSo you can get numbered equations like this:\n\\begin{equation}\n  PV = nRT\n\\end{equation}\nSo let your imagination run wild. As you can tell, I'm more or less just\nfilling in space now. This will be the last sentence. Developer Info Franterminator I program stuff in Fortran.","tags":"","loc":"index.html"},{"title":"main.f95 – Fortran Program","text":"Programs CN Subroutines linea commandLine bienvenido datosPlaca constructor fCholesky linearSystem Source Code main.f95 Source Code !< author: francisco rivera alvarez !  Programa para el calculo de flechas de una placa apoyada !  en sus cantos con carga hidraulica hasta la mitad de su largo Program CN !< Interface para poder fijar las dimensiones de la matriz en la ! subroutine constructor interface subroutine constructor ( matriz , f , n , m ) real * 8 , dimension (:,:), allocatable , intent ( inout ) :: matriz !! sistema de ecuaciones real * 8 , dimension (:), allocatable , intent ( inout ) :: f !! vector terminos independientes integer , intent ( out ) :: n , m end subroutine end interface real * 8 , dimension (:,:), allocatable :: matriz !! sistema de ecuaciones real * 8 , dimension (:), allocatable :: f !! vector terminos independientes integer :: n , m !! numero de puntos para discretizar largo(n) y ancho(m) real * 8 , dimension (:,:), allocatable :: fMatriz !! solucion en forma matricial integer , dimension ( 2 ) :: forma !! forma de la matriz solucion integer , dimension ( 2 ) :: orden = ( / 2 , 1 / ) !! orden de los numeros al cambiar vector a matriz solucion logical :: asserts = . FALSE . !! si se activa se imprimen los datos de la factorizacion ! inicio del programa call commandLine ( asserts ) ! opciones de ejecucion call bienvenido () ! mensaje de bienvenida (header) call constructor ( matriz , f , n , m ) ! calculo de las matrices ! muestra la matriz y factorizacion if ( asserts ) then call printMatrix ( matriz , 'Matriz' ) ! imprime en pantalla la matriz call printVector ( f , 'Vector' ) ! imprime en pantallas el vector de terminos independientes ! factorizacion y resultados call fCholesky ( matriz , n , m ) ! factorizada la matriz por cholesky call printMatrix ( matriz , 'Matriz (factorizada)' ) ! resolucion del sistema call linearSystem ( matriz , f , n , m ) ! resuelve call linearSystem ( matriz , f , n , m ) ! resuelve ! cambio de vector a matriz solucion allocate ( fMatriz ( n , m )) forma ( 1 ) = n forma ( 2 ) = m fMatriz = reshape ( f , forma , order = orden ) call printMatrix ( fMatriz , 'Vector solucion' ) ! muestra solo la solucion else ! factoriza y resuelve call fCholesky ( matriz , n , m ) call linearSystem ( matriz , f , n , m ) call linearSystem ( matriz , f , n , m ) ! cambio de vector a matriz solucion allocate ( fMatriz ( n , m )) forma ( 1 ) = n forma ( 2 ) = m fMatriz = reshape ( f , forma , order = orden ) call printMatrix ( fMatriz , 'Vector solucion' ) end if ! para que no se cierre el programa derepente write ( * , * ) \"Gracias por usar el programa...\" read ( * , * ) contains !< Imprime una linea, un texto centrado y una línea. ! Creando como un titulo. subroutine header ( label ) character ( len =* ), intent ( in ) :: label character ( len = 30 ) :: formato character ( len = 2 ) :: iString integer :: i ! 30 is the line length / 2 i = 30 - len ( label ) / 2 write ( iString , '(i2)' ) i formato = '(' // iString // 'X,A)' call linea () write ( * , formato ) label call linea () end subroutine !< Imprime una matriz mas un texto como titulo. subroutine printMatrix ( matriz , label ) real * 8 , dimension (:,:), intent ( in ) :: matriz character ( len =* ), intent ( in ) :: label integer :: i , j call header ( label ) do i = 1 , ubound ( matriz , 1 ) write ( * , '(*(f0.4,5x))' ) ( matriz ( i , j ), j = 1 , ubound ( matriz , 2 )) end do call linea () end subroutine !< Imprime un vector mas un texto como titulo subroutine printVector ( f , label ) real * 8 , dimension (:), intent ( in ) :: f character ( len =* ), intent ( in ) :: label integer :: i call header ( label ) do i = 1 , ubound ( f , 1 ) write ( * , * ) f ( i ) end do call linea () end subroutine End Program CN !< Imprime una línea de 60 caracteres. !  Se usa para separar la informacion que se imprime en la pantalla subroutine linea () write ( * , * ) \"____________________________________________________________\" end subroutine !< Analiza los argumentos cuando se ejecuto el programa. !  -h -> help: imprime las opciones disponibles. !  -a -> asserts: activa la impresion de los datos de la factorizacion. subroutine commandLine ( asserts ) logical , intent ( out ) :: asserts !! cuando es verdadera se activa la impresion de los datos de factorizacion integer :: i !! numero de argumentos character ( len = 30 ) :: cmd !! el argumento que se analiza i = iargc () if ( i > 0 ) then call getarg ( i , cmd ) if ( cmd == '-h' ) then write ( * , * ) 'Las opciones disponibles son:' write ( * , * ) '-h para ver esta ayuda' write ( * , * ) '-a para activar la impresion de los datos de factorizacion' call exit ( 0 ) end if if ( cmd == '-a' ) then write ( * , * ) 'Se ha activado la impresion de los datos de factorizacion.' asserts = . TRUE . end if end if end subroutine !< Imprime un mensaje de bienvenida subroutine bienvenido () write ( * , * ) \".______    __          ___      .__   __.  __  ___      _______. __    __   _______  __       __      \" write ( * , * ) \"|   _  \\  |  |        /   \\     |  \\ |  | |  |/  /     /       ||  |  |  | |   ____||  |     |  |     \" write ( * , * ) \"|  |_)  | |  |       /  &#94;  \\    |   \\|  | |  '  /     |   (----`|  |__|  | |  |__   |  |     |  |     \" write ( * , * ) \"|   ___/  |  |      /  /_\\  \\   |  . `  | |    <       \\   \\    |   __   | |   __|  |  |     |  |     \" write ( * , * ) \"|  |      |  `----./  _____  \\  |  |\\   | |  .  \\  .----)   |   |  |  |  | |  |____ |  `----.|  `----.\" write ( * , * ) \"| _|      |_______/__/     \\__\\ |__| \\__| |__|\\__\\ |_______/    |__|  |__| |_______||_______||_______|\" write ( * , * ) \"Bienvenido -------> \" write ( * , '(20X,A)' ) \"Pulse enter para continuar\" read ( * , * ) end subroutine !< Solicita los datos necesarios para el calculo de la flecha. subroutine datosPlaca ( ancho , largo , espesor , coefMat , n , m ) integer * 4 , intent ( out ) :: n , m !! numero de puntos para discretizar la placa real * 8 , intent ( out ) :: largo , ancho , espesor !! dimensiones de la placa real * 8 , intent ( out ) :: coefMat !! E*t&#94;3/(12(1-v&#94;2)) real * 8 :: Young !! Modulo de Young real * 8 :: poisson !! Coeficiente de Poisson6 ! Datos tecnicos de la placa write ( * , * ) \"*************************\" write ( * , * ) \"*   DATOS DE LA PLACA   *\" write ( * , * ) \"*************************\" write ( * , * ) \"-> ancho de la placa\" write ( * , '(A,$)' ) \"(metros) \" read ( * , * ) ancho write ( * , * ) \"-> largo de la placa\" write ( * , '(A,$)' ) \"(metros) \" read ( * , * ) largo write ( * , * ) \"-> espesor de la placa\" write ( * , '(A,$)' ) \"(metros) \" read ( * , * ) espesor ! datos para la discretizacion del modelo write ( * , * ) \"*************************\" write ( * , * ) \"*   NUMERO DE PUNTOS    *\" write ( * , * ) \"*************************\" write ( * , * ) \"-> puntos para discretizar el ancho\" write ( * , '(A,$)' ) \"(integer) \" read ( * , * ) n write ( * , * ) \"-> puntos para discretizar el largo\" write ( * , '(A,$)' ) \"(integer) \" read ( * , * ) m ! propiedades del material write ( * , * ) \"*************************\" write ( * , * ) \"*   DATOS DEL MATERIAL  *\" write ( * , * ) \"*************************\" write ( * , * ) \"-> Modulo de Young\" write ( * , '(A,$)' ) \"(MPa) \" read ( * , * ) Young write ( * , * ) \"-> Coef. de poisson\" write ( * , '(A,$)' ) \"(_real_) \" read ( * , * ) poisson ! MPa (N/mm3) -> 1000 KPa (kN/m2) coefMat = Young * 1000 * espesor ** 3 coefMat = coefMat / ( 12 * ( 1 - poisson ** 2 )) end subroutine !< Calculo los terminos de la matriz y el vector de terminso independientes y !  los coloca en su sitio. La matriz se almacena en banda. subroutine constructor ( matriz , f , n , m ) real * 8 , dimension (:,:), allocatable , intent ( inout ) :: matriz real * 8 , dimension (:), allocatable , intent ( inout ) :: f integer , intent ( out ) :: n , m real * 8 :: ancho , largo , espesor , A , B , C , deltaX , deltaY real * 8 :: coefMat , presion integer :: i , j call datosPlaca ( ancho , largo , espesor , coefMat , n , m ) ! calculo de los coef A, B y C deltaX = ancho / ( n + 1 ) deltaY = largo / ( m + 1 ) B = 1 / ( deltaX ** 2 ) C = 1 / ( deltaY ** 2 ) A = - 2 * ( B + C ) write ( * , '(A,3(f0.2,X),A)' ) \"[A,B,C] -> [ \" , A , B , C , \"]\" !matriz y vector a cero allocate ( matriz ( n * m , n * m ), f ( n * m )) do i = 1 , n * m f ( i ) = 0 do j = 1 , n * m matriz ( i , j ) = 0 end do end do ! construccion matriz do i = 1 , n * m matriz ( i , 1 ) = A if ( mod ( i , n ) == 0 . AND . i > 1 ) then matriz ( i , 2 ) = 0 else matriz ( i , 2 ) = B end if if ( i + n <= n * m ) matriz ( i , n + 1 ) = C end do ! construccion vector j = 1 do i = 1 , n * m ! peso especifico agua = 10000 N / m3 -> 10 kN / m3 presion = 10 * ( largo / 2 - j * deltaY ) / coefMat !solo hasta la mitad if ( presion < 0 ) then f ( i ) = 0 else f ( i ) = presion end if ! las filas tienen la misma presion if ( mod ( i , m ) == 0 ) j = j + 1 end do end subroutine !< Factorización de Cholesky -> A = L * D * Transpose[L] subroutine fCholesky ( matriz , n , m ) real * 8 , dimension ( n * m , n * m ), intent ( inout ) :: matriz integer :: k , i , j real * 8 :: suma ! factorizacion de cholesky do k = 1 , n * m - 1 do i = 1 , k suma = 0 do j = 1 , i - 1 suma = suma + matriz ( j , i - j + 1 ) * matriz ( j , k + 2 - j ) end do matriz ( i , k + 2 - i ) = ( matriz ( i , k + 2 - i ) - suma ) end do do i = 1 , k matriz ( i , k + 2 - i ) = matriz ( i , k + 2 - i ) / matriz ( i , 1 ) end do suma = 0 do j = 1 , k suma = suma + matriz ( j , k + 2 - j ) * matriz ( j , 1 ) * matriz ( j , k + 2 - j ) end do matriz ( k + 1 , 1 ) = matriz ( k + 1 , 1 ) - suma end do end subroutine !< Resolucion del sistema de ecuaciones para una matriz en banda factorizada subroutine linearSystem ( matriz , f , n , m ) real * 8 , dimension ( n * m , n * m ), intent ( inout ) :: matriz real * 8 , dimension ( n * m ), intent ( inout ) :: f integer , intent ( in ) :: n , m integer :: i , j real * 8 :: suma = 0 do i = 2 , n * m suma = 0 do j = 1 , i - 1 suma = suma + matriz ( j , i - j + 1 ) * f ( j ) end do f ( i ) = f ( i ) - suma end do do i = 1 , n * m f ( i ) = f ( i ) / matriz ( i , 1 ) end do do i = n * m - 1 , 1 , - 1 suma = 0 do j = i + 1 , n * m suma = suma + matriz ( i , j - i + 1 ) * f ( j ) end do f ( i ) = f ( i ) - suma end do end subroutine","tags":"","loc":"sourcefile/main.f95.html"},{"title":"linea – Fortran Program","text":"subroutine linea() Imprime una línea de 60 caracteres.\n  Se usa para separar la informacion que se imprime en la pantalla Arguments None Called By proc~~linea~~CalledByGraph proc~linea linea proc~header header proc~header->proc~linea proc~printmatrix printMatrix proc~printmatrix->proc~linea proc~printmatrix->proc~header proc~printvector printVector proc~printvector->proc~linea proc~printvector->proc~header program~cn CN program~cn->proc~printmatrix program~cn->proc~printvector Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/linea.html"},{"title":"commandLine – Fortran Program","text":"subroutine commandLine(asserts) Analiza los argumentos cuando se ejecuto el programa.\n  -h -> help: imprime las opciones disponibles.\n  -a -> asserts: activa la impresion de los datos de la factorizacion. Arguments Type Intent Optional Attributes Name logical, intent(out) :: asserts cuando es verdadera se activa la impresion de los datos de factorizacion Called By proc~~commandline~~CalledByGraph proc~commandline commandLine program~cn CN program~cn->proc~commandline Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/commandline.html"},{"title":"bienvenido – Fortran Program","text":"subroutine bienvenido() Imprime un mensaje de bienvenida Arguments None Called By proc~~bienvenido~~CalledByGraph proc~bienvenido bienvenido program~cn CN program~cn->proc~bienvenido Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/bienvenido.html"},{"title":"datosPlaca – Fortran Program","text":"subroutine datosPlaca(ancho, largo, espesor, coefMat, n, m) Solicita los datos necesarios para el calculo de la flecha. Arguments Type Intent Optional Attributes Name real(kind=8), intent(out) :: ancho dimensiones de la placa real(kind=8), intent(out) :: largo dimensiones de la placa real(kind=8), intent(out) :: espesor dimensiones de la placa real(kind=8), intent(out) :: coefMat E*t&#94;3/(12(1-v&#94;2)) integer(kind=4), intent(out) :: n numero de puntos para discretizar la placa integer(kind=4), intent(out) :: m numero de puntos para discretizar la placa Called By proc~~datosplaca~~CalledByGraph proc~datosplaca datosPlaca proc~constructor constructor proc~constructor->proc~datosplaca Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/datosplaca.html"},{"title":"constructor – Fortran Program","text":"subroutine constructor(matriz, f, n, m) Calculo los terminos de la matriz y el vector de terminso independientes y\n  los coloca en su sitio. La matriz se almacena en banda. Arguments Type Intent Optional Attributes Name real(kind=8), intent(inout), dimension(:,:), allocatable :: matriz real(kind=8), intent(inout), dimension(:), allocatable :: f integer, intent(out) :: n integer, intent(out) :: m Calls proc~~constructor~~CallsGraph proc~constructor constructor proc~datosplaca datosPlaca proc~constructor->proc~datosplaca Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/constructor.html"},{"title":"fCholesky – Fortran Program","text":"subroutine fCholesky(matriz, n, m) Factorización de Cholesky -> A = L * D * Transpose[L] Arguments Type Intent Optional Attributes Name real(kind=8), intent(inout), dimension(n*m,n*m) :: matriz integer :: n integer :: m Called By proc~~fcholesky~~CalledByGraph proc~fcholesky fCholesky program~cn CN program~cn->proc~fcholesky Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/fcholesky.html"},{"title":"linearSystem – Fortran Program","text":"subroutine linearSystem(matriz, f, n, m) Resolucion del sistema de ecuaciones para una matriz en banda factorizada Arguments Type Intent Optional Attributes Name real(kind=8), intent(inout), dimension(n*m,n*m) :: matriz real(kind=8), intent(inout), dimension(n*m) :: f integer, intent(in) :: n integer, intent(in) :: m Called By proc~~linearsystem~~CalledByGraph proc~linearsystem linearSystem program~cn CN program~cn->proc~linearsystem Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/linearsystem.html"},{"title":"header – Fortran Program","text":"subroutine header(label) Imprime una linea, un texto centrado y una línea.\n Creando como un titulo. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: label Calls proc~~header~~CallsGraph proc~header header proc~linea linea proc~header->proc~linea Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~header~~CalledByGraph proc~header header proc~printmatrix printMatrix proc~printmatrix->proc~header proc~printvector printVector proc~printvector->proc~header program~cn CN program~cn->proc~printmatrix program~cn->proc~printvector Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/header.html"},{"title":"printMatrix – Fortran Program","text":"subroutine printMatrix(matriz, label) Imprime una matriz mas un texto como titulo. Arguments Type Intent Optional Attributes Name real(kind=8), intent(in), dimension(:,:) :: matriz character(len=*), intent(in) :: label Calls proc~~printmatrix~~CallsGraph proc~printmatrix printMatrix proc~header header proc~printmatrix->proc~header proc~linea linea proc~printmatrix->proc~linea proc~header->proc~linea Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~printmatrix~~CalledByGraph proc~printmatrix printMatrix program~cn CN program~cn->proc~printmatrix Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/printmatrix.html"},{"title":"printVector – Fortran Program","text":"subroutine printVector(f, label) Imprime un vector mas un texto como titulo Arguments Type Intent Optional Attributes Name real(kind=8), intent(in), dimension(:) :: f character(len=*), intent(in) :: label Calls proc~~printvector~~CallsGraph proc~printvector printVector proc~header header proc~printvector->proc~header proc~linea linea proc~printvector->proc~linea proc~header->proc~linea Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~printvector~~CalledByGraph proc~printvector printVector program~cn CN program~cn->proc~printvector Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/printvector.html"},{"title":"constructor – Fortran Program","text":"interface Interface para poder fijar las dimensiones de la matriz en la\n subroutine constructor Called By interface~~constructor~~CalledByGraph interface~constructor constructor program~cn CN program~cn->interface~constructor Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. subroutine constructor(matriz, f, n, m) Arguments Type Intent Optional Attributes Name real(kind=8), intent(inout), dimension(:,:), allocatable :: matriz sistema de ecuaciones real(kind=8), intent(inout), dimension(:), allocatable :: f vector terminos independientes integer, intent(out) :: n integer, intent(out) :: m","tags":"","loc":"interface/constructor.html"},{"title":"CN – Fortran Program","text":"Programa para el calculo de flechas de una placa apoyada\n  en sus cantos con carga hidraulica hasta la mitad de su largo Calls program~~cn~~CallsGraph program~cn CN interface~constructor constructor program~cn->interface~constructor proc~bienvenido bienvenido program~cn->proc~bienvenido proc~linearsystem linearSystem program~cn->proc~linearsystem proc~commandline commandLine program~cn->proc~commandline proc~printmatrix printMatrix program~cn->proc~printmatrix proc~printvector printVector program~cn->proc~printvector proc~fcholesky fCholesky program~cn->proc~fcholesky proc~header header proc~printmatrix->proc~header proc~linea linea proc~printmatrix->proc~linea proc~printvector->proc~header proc~printvector->proc~linea proc~header->proc~linea Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables matriz f n m fMatriz forma orden asserts Interfaces constructor Subroutines header printMatrix printVector Variables Type Attributes Name Initial real(kind=8), dimension(:,:), allocatable :: matriz sistema de ecuaciones real(kind=8), dimension(:), allocatable :: f vector terminos independientes integer :: n numero de puntos para discretizar largo(n) y ancho(m) integer :: m numero de puntos para discretizar largo(n) y ancho(m) real(kind=8), dimension(:,:), allocatable :: fMatriz solucion en forma matricial integer, dimension(2) :: forma forma de la matriz solucion integer, dimension(2) :: orden = (/2, 1/) orden de los numeros al cambiar vector a matriz solucion logical :: asserts = .FALSE. si se activa se imprimen los datos de la factorizacion Interfaces interface Interface para poder fijar las dimensiones de la matriz en la\n subroutine constructor subroutine constructor (matriz, f, n, m) Arguments Type Intent Optional Attributes Name real(kind=8), intent(inout), dimension(:,:), allocatable :: matriz sistema de ecuaciones real(kind=8), intent(inout), dimension(:), allocatable :: f vector terminos independientes integer, intent(out) :: n integer, intent(out) :: m Subroutines subroutine header (label) Imprime una linea, un texto centrado y una línea.\n Creando como un titulo. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: label subroutine printMatrix (matriz, label) Imprime una matriz mas un texto como titulo. Arguments Type Intent Optional Attributes Name real(kind=8), intent(in), dimension(:,:) :: matriz character(len=*), intent(in) :: label subroutine printVector (f, label) Imprime un vector mas un texto como titulo Arguments Type Intent Optional Attributes Name real(kind=8), intent(in), dimension(:) :: f character(len=*), intent(in) :: label","tags":"","loc":"program/cn.html"}]}