var tipuesearch = {"pages":[{"title":" Fortran Program ","text":"Fortran Program Hi, my name is . This is a project which I wrote. This file will provide the documents. I'm\nwriting the body of the text here. It contains an overall description of the\nproject. It might explain how to go about installing/compiling it. It might\nprovide a change-log for the code. [[linalg]] Maybe it will talk about the\nhistory and/or motivation for this software. Note You can include any notes (or bugs, warnings, or todos) like so. Bug You can have multi-paragraph versions of these too! That means you can\ninclude ordered lists unordered lists images etc. Isn't that cool? Bug Hey I'm doing it again... This ones ends mid... ...paragraph. You can have as many paragraphs as you like here and can use headlines, links,\nimages, etc. Basically, you can use anything in Markdown and Markdown-Extra.\nFurthermore, you can insert LaTeX into your documentation. So, for example,\nyou can provide inline math using like  y = x&#94;2  or math on its own line\nlike  x = \\sqrt{y}  or  e = mc&#94;2.  You can even use LaTeX environments!\nSo you can get numbered equations like this:\n\\begin{equation}\n  PV = nRT\n\\end{equation}\nSo let your imagination run wild. As you can tell, I'm more or less just\nfilling in space now. This will be the last sentence. Developer Info Franterminator I program stuff in Fortran.","tags":"","loc":"index.html"},{"title":"main.f95 – Fortran Program","text":"Programs CN Subroutines linea printMatrix bienvenido datosPlaca constructor fCholesky linearSystem Source Code main.f95 Source Code !< author: francisco rivera alvarez !  Programa para el calculo de flechas de una placa apoyada !  en sus cantos con carga hidráulica hasta la mitad de su largo Program CN !< Interface para poder fijar las dimensiones de la matriz en la ! subroutine constructor interface subroutine constructor ( matriz , f , n , m ) real * 8 , dimension (:,:), allocatable , intent ( inout ) :: matriz real * 8 , dimension (:), allocatable , intent ( inout ) :: f integer , intent ( out ) :: n , m end subroutine end interface real * 8 , dimension (:,:), allocatable :: matriz !! sistema de ecuaciones real * 8 , dimension (:), allocatable :: f !! vector terminos independientes integer :: i , n , m !! numero de puntos para discretizar largo(n) y ancho(m) real * 8 :: ancho , largo , espesor !! dimensiones de la placa ! numero de puntos call bienvenido () call constructor ( matriz , f , n , m ) ! muestra la matriz call linea write ( * , '(25X,A)' ) \"Matriz\" call linea call printMatrix ( matriz , n , m ) call linea write ( * , '(25X,A)' ) \"Vector\" call linea do i = 1 , n * m write ( * , * ) f ( i ) end do call linea ! factorizacion y resultados call fCholesky ( matriz , n , m ) call linea write ( * , '(20X,A)' ) \"Matriz (factorizada)\" call linea call printMatrix ( matriz , n , m ) ! resolucion del sistema call linearSystem ( matriz , f , n , m ) call linearSystem ( matriz , f , n , m ) call linea write ( * , '(20X,A)' ) \"Vector solucion\" call linea do i = 1 , n * m write ( * , * ) f ( i ) end do call linea ! para que no se cierre el programa derepente write ( * , * ) \"Gracias por usar el programa...\" read ( * , * ) End Program CN subroutine linea () write ( * , * ) \"___________________________________________________________\" end subroutine subroutine printMatrix ( matriz , n , m ) real * 8 , dimension ( n * m , n * m ), intent ( in ) :: matriz integer :: i , j do i = 1 , n * m write ( * , '(*(f0.4,5x))' ) ( matriz ( i , j ), j = 1 , n * m ) end do end subroutine subroutine bienvenido () character ( len = 300 ) :: line integer :: iostat = 1 ! abrir archivo de bienvenida e imprimir mensaje write ( * , * ) \".______    __          ___      .__   __.  __  ___      _______. __    __   _______  __       __      \" write ( * , * ) \"|   _  \\  |  |        /   \\     |  \\ |  | |  |/  /     /       ||  |  |  | |   ____||  |     |  |     \" write ( * , * ) \"|  |_)  | |  |       /  &#94;  \\    |   \\|  | |  '  /     |   (----`|  |__|  | |  |__   |  |     |  |     \" write ( * , * ) \"|   ___/  |  |      /  /_\\  \\   |  . `  | |    <       \\   \\    |   __   | |   __|  |  |     |  |     \" write ( * , * ) \"|  |      |  `----./  _____  \\  |  |\\   | |  .  \\  .----)   |   |  |  |  | |  |____ |  `----.|  `----.\" write ( * , * ) \"| _|      |_______/__/     \\__\\ |__| \\__| |__|\\__\\ |_______/    |__|  |__| |_______||_______||_______|\" write ( * , * ) \"Bienvenido -------> \" write ( * , '(20X,A)' ) \"Pulse enter para continuar\" read ( * , * ) end subroutine subroutine datosPlaca ( ancho , largo , espesor , coefMat , n , m ) integer * 4 , intent ( out ) :: n , m real * 8 , intent ( out ) :: largo , ancho , espesor , coefMat real * 8 :: Young , poisson ! Datos tecnicos de la placa write ( * , * ) \"*************************\" write ( * , * ) \"*   DATOS DE LA PLACA   *\" write ( * , * ) \"*************************\" write ( * , * ) \"-> ancho de la placa\" write ( * , '(A,$)' ) \"(metros) \" read ( * , * ) ancho write ( * , * ) \"-> largo de la placa\" write ( * , '(A,$)' ) \"(metros) \" read ( * , * ) largo write ( * , * ) \"-> espesor de la placa\" write ( * , '(A,$)' ) \"(metros) \" read ( * , * ) espesor ! datos para la discretizacion del modelo write ( * , * ) \"*************************\" write ( * , * ) \"*   NUMERO DE PUNTOS    *\" write ( * , * ) \"*************************\" write ( * , * ) \"-> puntos para discretizar el ancho\" write ( * , '(A,$)' ) \"(integer) \" read ( * , * ) n write ( * , * ) \"-> puntos para discretizar el largo\" write ( * , '(A,$)' ) \"(integer) \" read ( * , * ) m ! propiedades del material write ( * , * ) \"*************************\" write ( * , * ) \"*   DATOS DEL MATERIAL  *\" write ( * , * ) \"*************************\" write ( * , * ) \"-> Modulo de Young\" write ( * , '(A,$)' ) \"(MPa) \" read ( * , * ) Young write ( * , * ) \"-> Coef. de poisson\" write ( * , '(A,$)' ) \"(_real_) \" read ( * , * ) poisson coefMat = Young * espesor ** 3 coefMat = coefMat / ( 12 * ( 1 - poisson ** 2 )) end subroutine subroutine constructor ( matriz , f , n , m ) real * 8 , dimension (:,:), allocatable , intent ( inout ) :: matriz real * 8 , dimension (:), allocatable , intent ( inout ) :: f integer , intent ( out ) :: n , m real * 8 :: ancho , largo , espesor , A , B , C , deltaX , deltaY real * 8 :: coefMat , presion integer :: i , j call datosPlaca ( ancho , largo , espesor , coefMat , n , m ) ! calculo de los coef A, B y C deltaX = ancho / ( n + 1 ) deltaY = largo / ( m + 1 ) B = 1 / ( deltaX ** 2 ) C = 1 / ( deltaY ** 2 ) A = - 2 * ( B + C ) write ( * , '(A,3(f0.2,X),A)' ) \"[A,B,C] -> [ \" , A , B , C , \"]\" !matriz y vector a cero allocate ( matriz ( n * m , n * m ), f ( n * m )) do i = 1 , n * m f ( i ) = 0 do j = 1 , n * m matriz ( i , j ) = 0 end do end do ! construccion matriz do i = 1 , n * m matriz ( i , 1 ) = A if ( mod ( i , n ) == 0 . AND . i > 1 ) then matriz ( i , 2 ) = 0 else matriz ( i , 2 ) = B end if if ( i + n <= n * m ) matriz ( i , n + 1 ) = C end do do i = 1 , n * m ! peso especifico agua = 10000 N / m2 -> 0.01 N / mm2 -> 0.01 MPa presion = 0.01 * ( largo / 2 - ( i + 1 ) / m * deltaY ) / coefMat if ( presion < 0 ) then f ( i ) = 0 else f ( i ) = presion end if end do end subroutine subroutine fCholesky ( matriz , n , m ) real * 8 , dimension ( n * m , n * m ), intent ( inout ) :: matriz integer :: k , i , j real * 8 :: suma ! factorizacion de cholesky do k = 1 , n * m - 1 do i = 1 , k suma = 0 do j = 1 , i - 1 suma = suma + matriz ( j , i - j + 1 ) * matriz ( j , k + 2 - j ) end do matriz ( i , k + 2 - i ) = ( matriz ( i , k + 2 - i ) - suma ) end do do i = 1 , k matriz ( i , k + 2 - i ) = matriz ( i , k + 2 - i ) / matriz ( i , 1 ) end do suma = 0 do j = 1 , k suma = suma + matriz ( j , k + 2 - j ) * matriz ( j , 1 ) * matriz ( j , k + 2 - j ) end do matriz ( k + 1 , 1 ) = matriz ( k + 1 , 1 ) - suma end do end subroutine subroutine linearSystem ( matriz , f , n , m ) real * 8 , dimension ( n * m , n * m ), intent ( inout ) :: matriz real * 8 , dimension ( n * m ), intent ( inout ) :: f integer , intent ( in ) :: n , m integer :: i , j real * 8 :: suma = 0 do i = 2 , n * m suma = 0 do j = 1 , i - 1 suma = suma + matriz ( j , i - j + 1 ) * f ( j ) end do f ( i ) = f ( i ) - suma end do do i = 1 , n * m f ( i ) = f ( i ) / matriz ( i , 1 ) end do do i = n * m - 1 , 1 , - 1 suma = 0 do j = i + 1 , n * m suma = suma + matriz ( i , j - i + 1 ) * f ( j ) end do f ( i ) = f ( i ) - suma end do end subroutine","tags":"","loc":"sourcefile/main.f95.html"},{"title":"linea – Fortran Program","text":"subroutine linea() Arguments None Called By proc~~linea~~CalledByGraph proc~linea linea program~cn CN program~cn->proc~linea Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/linea.html"},{"title":"printMatrix – Fortran Program","text":"subroutine printMatrix(matriz, n, m) Arguments Type Intent Optional Attributes Name real(kind=8), intent(in), dimension(n*m,n*m) :: matriz integer :: n integer :: m Called By proc~~printmatrix~~CalledByGraph proc~printmatrix printMatrix program~cn CN program~cn->proc~printmatrix Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/printmatrix.html"},{"title":"bienvenido – Fortran Program","text":"subroutine bienvenido() Arguments None Called By proc~~bienvenido~~CalledByGraph proc~bienvenido bienvenido program~cn CN program~cn->proc~bienvenido Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/bienvenido.html"},{"title":"datosPlaca – Fortran Program","text":"subroutine datosPlaca(ancho, largo, espesor, coefMat, n, m) Arguments Type Intent Optional Attributes Name real(kind=8), intent(out) :: ancho real(kind=8), intent(out) :: largo real(kind=8), intent(out) :: espesor real(kind=8), intent(out) :: coefMat integer(kind=4), intent(out) :: n integer(kind=4), intent(out) :: m Called By proc~~datosplaca~~CalledByGraph proc~datosplaca datosPlaca proc~constructor constructor proc~constructor->proc~datosplaca Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/datosplaca.html"},{"title":"constructor – Fortran Program","text":"subroutine constructor(matriz, f, n, m) Arguments Type Intent Optional Attributes Name real(kind=8), intent(inout), dimension(:,:), allocatable :: matriz real(kind=8), intent(inout), dimension(:), allocatable :: f integer, intent(out) :: n integer, intent(out) :: m Calls proc~~constructor~~CallsGraph proc~constructor constructor proc~datosplaca datosPlaca proc~constructor->proc~datosplaca Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/constructor.html"},{"title":"fCholesky – Fortran Program","text":"subroutine fCholesky(matriz, n, m) Arguments Type Intent Optional Attributes Name real(kind=8), intent(inout), dimension(n*m,n*m) :: matriz integer :: n integer :: m Called By proc~~fcholesky~~CalledByGraph proc~fcholesky fCholesky program~cn CN program~cn->proc~fcholesky Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/fcholesky.html"},{"title":"linearSystem – Fortran Program","text":"subroutine linearSystem(matriz, f, n, m) Arguments Type Intent Optional Attributes Name real(kind=8), intent(inout), dimension(n*m,n*m) :: matriz real(kind=8), intent(inout), dimension(n*m) :: f integer, intent(in) :: n integer, intent(in) :: m Called By proc~~linearsystem~~CalledByGraph proc~linearsystem linearSystem program~cn CN program~cn->proc~linearsystem Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/linearsystem.html"},{"title":"constructor – Fortran Program","text":"interface Interface para poder fijar las dimensiones de la matriz en la\n subroutine constructor Called By interface~~constructor~~CalledByGraph interface~constructor constructor program~cn CN program~cn->interface~constructor Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. subroutine constructor(matriz, f, n, m) Arguments Type Intent Optional Attributes Name real(kind=8), intent(inout), dimension(:,:), allocatable :: matriz real(kind=8), intent(inout), dimension(:), allocatable :: f integer, intent(out) :: n integer, intent(out) :: m","tags":"","loc":"interface/constructor.html"},{"title":"CN – Fortran Program","text":"Programa para el calculo de flechas de una placa apoyada\n  en sus cantos con carga hidráulica hasta la mitad de su largo Calls program~~cn~~CallsGraph program~cn CN proc~bienvenido bienvenido program~cn->proc~bienvenido proc~printmatrix printMatrix program~cn->proc~printmatrix proc~linea linea program~cn->proc~linea interface~constructor constructor program~cn->interface~constructor proc~fcholesky fCholesky program~cn->proc~fcholesky proc~linearsystem linearSystem program~cn->proc~linearsystem Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables matriz f i n m ancho largo espesor Interfaces constructor Variables Type Attributes Name Initial real(kind=8), dimension(:,:), allocatable :: matriz sistema de ecuaciones real(kind=8), dimension(:), allocatable :: f vector terminos independientes integer :: i numero de puntos para discretizar largo(n) y ancho(m) integer :: n numero de puntos para discretizar largo(n) y ancho(m) integer :: m numero de puntos para discretizar largo(n) y ancho(m) real(kind=8) :: ancho dimensiones de la placa real(kind=8) :: largo dimensiones de la placa real(kind=8) :: espesor dimensiones de la placa Interfaces interface Interface para poder fijar las dimensiones de la matriz en la\n subroutine constructor subroutine constructor (matriz, f, n, m) Arguments Type Intent Optional Attributes Name real(kind=8), intent(inout), dimension(:,:), allocatable :: matriz real(kind=8), intent(inout), dimension(:), allocatable :: f integer, intent(out) :: n integer, intent(out) :: m","tags":"","loc":"program/cn.html"}]}